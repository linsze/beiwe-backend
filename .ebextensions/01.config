packages:
  yum:
    gcc: []
    postgresql: []
    postgresql-devel: []
    htop: []
    python-devel: []
    git: []

commands:
  01_setup_swap:
    # The swap was initially required due memory issues in Flask, Apache ModWSGI, and/or python's
    # ZipFile implementation, now it is needed on low-memory instances because the grpcio (python)
    # subdependency has a buggy compile step that is super memory hungry.  At time of commenting CPU
    # usage is much more of a limiting factor than memory usage.
    ignoreErrors: true
    command: fallocate -l 4G /swapfile && chmod 600 /swapfile && mkswap /swapfile && swapon /swapfile && swapon -s
  02_net_core_somaxconn:
    # It is possible to hit connection count limit issues on heavily loaded servers with more than 2
    # cpu cores. (uwsgi logs when this occurs) The default value is 128.
    command: sysctl -w net.core.somaxconn=1024

container_commands:
  01_setup_profile:
    # quality of life for ssh sessions
    command: mv ./cluster_management/pushed_files/eb_profile.sh /home/ec2-user/.bashrc; chmod 644 /home/ec2-user/.bashrc; chown ec2-user /home/ec2-user/.bashrc; chgrp ec2-user /home/ec2-user/.bashrc
  02_setup_reasonable_inputrc:
    command: mv ./cluster_management/pushed_files/.inputrc /home/ec2-user/.inputrc; chmod 664 /home/ec2-user/.inputrc; chown ec2-user /home/ec2-user/.inputrc; chgrp ec2-user /home/ec2-user/.inputrc
  03_update_pglib:
    # installing the newest version of the postgres support library requires a yum-config-manager
    # command, so can't stick in yum installs at top of file.  These amazon-linux-extras commands
    # take about 8 seconds each, the yum command is quick.
    command: sudo amazon-linux-extras install epel -y; sudo yum-config-manager --enable epel; sudo amazon-linux-extras install postgresql13 -y
  04_migrate:
    # django database migrations. FYI these are automatically wrapped in a database transaction, and
    # sometimes they will succeed even when a deploy operation fails.  If this step fails try sshing
    # onto a data processing server, run `processing-stop`, cd into the beiwe-backend folder,
    # do a `git pull`, and then run `python manage.py migrate`, let it finish, and then run
    # `processing-start` (you can then run `htop` to check that celery is running, try tree mode.)
    leader_only: true
    command: source /var/app/venv/*/bin/activate && python3 manage.py migrate
  05_run_optional_deploy_script:
    # the ondeploy script checks specific locations in the s3 bucket for .py files and executes them.
    command: source /var/app/venv/*/bin/activate && python3 run_script.py run_custom_ondeploy_script elasticbeanstalk

option_settings:
  aws:elasticbeanstalk:container:python:
    # does this setting do anything for aws linux 2?
    WSGIPath: wsgi.py
  aws:elasticbeanstalk:environment:proxy:
    ProxyServer: apache
  aws:elasticbeanstalk:environment:proxy:staticfiles:
    /static: frontend/static

files:
"/etc/httpd/conf.d/ssl_rewrite.conf":
    mode: "000644"
    owner: root
    group: root
    content: |
        RewriteEngine On
        <If "-n '%{HTTP:X-Forwarded-Proto}' && %{HTTP:X-Forwarded-Proto} != 'https'">
        RewriteRule (.*) https://%{HTTP_HOST}%{REQUEST_URI} [R,L]
        </If>

# the location to stick custom apache configurations is at /etc/httpd/conf.d/elasticbeanstalk/*.conf
#  (as far as I can tell, anyway.  its declared in the default apache configuration.  )
# to change the number of processes and threads check the ProcFile parameters